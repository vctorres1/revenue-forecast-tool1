import streamlit as st
import pandas as pd
import ast
import random

st.set_page_config(page_title="Diversified Deal Forecast Validator", layout="wide")
st.title("Diversify Homogenous Deal Plans Into Realistic Forecasts")

st.markdown("""
Upload the CSV output generated by the **original forecast simulator**.  
This app will:
- Replace homogenous monthly deals with varied ones (by value + commission rate)
- Recompute commission schedules
- Identify combinations that **still hit or nearly hit** your profit goal.
""")

# ---------------------------
# USER INPUTS
# ---------------------------
uploaded_file = st.file_uploader("Upload `forecast_results.csv`", type=["csv"])

default_expenses = [
    {"label": "Travel & Expenses", "amount": 6000.0},
    {"label": "Marketing Costs", "amount": 600.0},
    {"label": "Marketing Agency", "amount": 3000.0},
    {"label": "Full-Time VA Salary", "amount": 1200.0},
    {"label": "Part-Time VA Salary", "amount": 400.0},
    {"label": "Finance VA Salary", "amount": 400.0},
    {"label": "AI/Automations", "amount": 250.0},
    {"label": "Software & SaaS Tools", "amount": 600.0},
    {"label": "Legal & Compliance Fees", "amount": 300.0},
    {"label": "Insurance (Liability, E&O, Cyber)", "amount": 300.0}
]

st.sidebar.header("Simulation Settings")
forecast_months = st.sidebar.slider("Number of Forecast Months", 1, 12, 6)
net_target = st.sidebar.number_input("Net Profit Target", value=1_000_000)
near_target_threshold = st.sidebar.number_input("Near-Qualified Threshold", value=800_000)

st.sidebar.subheader("Monthly Expenses")
for i, exp in enumerate(default_expenses):
    exp["amount"] = st.sidebar.number_input(exp["label"], value=exp["amount"])

total_expense_per_month = sum(exp["amount"] for exp in default_expenses)

# ---------------------------
# UTILITY FUNCTIONS
# ---------------------------

# Rate assignment logic (lower commission for higher-value deals)
def get_commission_rate_for_value(value):
    if value >= 2_000_000:
        return 0.05
    elif value >= 1_000_000:
        return 0.11
    else:
        return 0.17

# Replaces homogenous plans with varied deals
def diversify_and_recalculate(deal_plan, forecast_months):
    monthly_commission = [0] * forecast_months

    for month_index, (deal_count, _, _) in enumerate(deal_plan):
        for _ in range(deal_count):
            deal_value = random.choice([500_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000])
            commission_rate = get_commission_rate_for_value(deal_value)
            commission_total = deal_value * commission_rate
            monthly_payment = commission_total / 12

            for offset in range(12):
                payout_month = month_index + 2 + offset
                if payout_month < forecast_months:
                    monthly_commission[payout_month] += monthly_payment

    return monthly_commission

# Apply new calculation per row
def recompute_net_profit(row):
    monthly_commissions = diversify_and_recalculate(row["Parsed Deal Plan"], forecast_months)
    commission_revenue = sum(monthly_commissions)
    total_revenue = commission_revenue + row["Total Coaching Revenue"]
    total_expenses = total_expense_per_month * forecast_months
    net_profit = total_revenue - total_expenses

    return pd.Series({
        "Diversified Commission Revenue": commission_revenue,
        "Updated Total Revenue": total_revenue,
        "Updated Net Profit": net_profit
    })

# ---------------------------
# MAIN APP LOGIC
# ---------------------------
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("✅ File successfully loaded!")

    try:
        df["Parsed Deal Plan"] = df["Deal Plan"].apply(ast.literal_eval)
    except Exception as e:
        st.error(f"❌ Could not parse Deal Plan column: {e}")
        st.stop()

    with st.spinner("Reprocessing all plans..."):
        df_new = df.join(df.apply(recompute_net_profit, axis=1))

    qualified = df_new[df_new["Updated Net Profit"] >= net_target].copy()
    near_qualified = df_new[
        (df_new["Updated Net Profit"] >= near_target_threshold) &
        (df_new["Updated Net Profit"] < net_target)
    ].copy()

    st.subheader(f"✅ Qualified Plans (Net Profit ≥ ${net_target:,.0f}) — {len(qualified)} Found")
    if not qualified.empty:
        st.dataframe(qualified.head(100))
        csv = qualified.to_csv(index=False).encode("utf-8")
        st.download_button("📥 Download Qualified Plans as CSV", csv, "qualified_forecasts.csv", "text/csv")

    st.subheader(f"⚠️ Near-Qualified Plans (≥ ${near_target_threshold:,.0f} but < ${net_target:,.0f}) — {len(near_qualified)} Found")
    if not near_qualified.empty:
        st.dataframe(near_qualified.head(100))
        csv2 = near_qualified.to_csv(index=False).encode("utf-8")
        st.download_button("📥 Download Near-Qualified Plans as CSV", csv2, "near_qualified_forecasts.csv", "text/csv")
    elif qualified.empty:
        st.warning("❌ No plan combinations reached your thresholds. Try increasing coaching revenue or simulating more deal plans.")
